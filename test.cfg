
Add-Type -AssemblyName PresentationFramework, PresentationCore, WindowsBase, System.Windows.Forms, System.Drawing  




#region xaml
[xml]$xaml = @" 

<Window 
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"


        Title="MainWindow" Height="1200" Width="1600">
    <Grid>
 <Grid Background="#FFC3BEBE"/>


        <Border BorderBrush="Black"
                BorderThickness="1" Height="68" VerticalAlignment="Top"/>
        <Border BorderBrush="Black" BorderThickness="1" Margin="0,68,0,0" Height="73" VerticalAlignment="Top"/>
        <Label x:Name="label_username" Content="info" HorizontalAlignment="Left" Margin="85,104,0,0" VerticalAlignment="Top"/>
        <Label x:Name="label_useris" Content="Username:" HorizontalAlignment="Left" Margin="14,104,0,0" VerticalAlignment="Top"/>
        <RichTextBox x:Name="richtexbox_log" Margin="47,560,0,0" HorizontalAlignment="Left" Width="1056" Height="248" VerticalAlignment="Top">
            <FlowDocument>
                <Paragraph>
                    <Run x:Name="richtextbox_log" Text=""/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <Button x:Name="process" Content="Get process" HorizontalAlignment="Left" Margin="572,196,0,0" VerticalAlignment="Top" />
        <Button x:Name="erreur" Content="DEBUG" HorizontalAlignment="Left" Margin="250,471,0,0" VerticalAlignment="Top" Background="#FFEF0404"/>
        <ListBox x:Name="listbox" Margin="47,196,0,0" Height="349" VerticalAlignment="Top" HorizontalAlignment="Left" Width="167"/>
        <Button x:Name="listbox_allservers" Content="Select all servers" HorizontalAlignment="Left" Margin="250,202,0,0" VerticalAlignment="Top" Height="30" Width="148"/>
        <Button x:Name="listbox_addserver" Content="Add Server" HorizontalAlignment="Left" Margin="250,232,0,0" VerticalAlignment="Top" Height="30" Width="148"/>
        <Button x:Name="listbox_editserver" Content="Edit Servers List" HorizontalAlignment="Left" Margin="250,262,0,0" VerticalAlignment="Top" Height="30" Width="148"/>
        <Button x:Name="listbox_addserveronsnow" Content="Add Server from Snow" HorizontalAlignment="Left" Margin="250,292,0,0" VerticalAlignment="Top" Height="30" Width="148"/>
        <Button x:Name="listbox_remoteserver" Content="Remove Server" HorizontalAlignment="Left" Margin="250,322,0,0" VerticalAlignment="Top" Height="28" Width="148"/>
        <DataGrid  Margin="47,834,0,0" Height="264" VerticalAlignment="Top" HorizontalAlignment="Left" Width="1056"/>
        <Button x:Name="services" Content="Get services" HorizontalAlignment="Left" Margin="572,221,0,0" VerticalAlignment="Top" Width="66"/>

    </Grid>
</Window>

"@ 
                                                                 

#Read the form 

$Reader = (New-Object System.Xml.XmlNodeReader $xaml)  
$Form = [Windows.Markup.XamlReader]::Load($reader)  

#AutoFind all controls 
$xaml.SelectNodes("//*[@*[contains(translate(name(.),'n','N'),'Name')]]")  | ForEach-Object {  
  New-Variable  -Name $_.Name -Value $Form.FindName($_.Name) -Force  
} 

#endregion


#region env GUI


$label_username.Content = $env:username

#endregion



#region function

function Write-LogRichTextBox
{
    <#
    .SYNOPSIS
    A function to log to the rich text box
    .DESCRIPTION
    A function to log to the rich text box
    #>
    param (
        [Parameter(Mandatory=$true)]
        [string]$LogString
    )
    # Timestamp the log entry
    $LogEntry = "$((Get-Date -Format "MM-dd-yyyy HH:mm:ss")) $($LogString)`n"
    # Write it to the log box
    $richtextbox_log.AppendText($LogEntry)
    $richtextbox_log.ScrollToEnd()
}

#endregion


function process 
{


$richtextbox_output.AppendText($(get-process | out-string))

}



$process.add_click({
    $AuditPart.AppendText("`n")
    Format-RichTextBox -RichTextBoxControl $AuditPart -Text 'Windows Remoting Service: ' -FontWeight Bold -NewLine

$Winrm = $Service | Where-Object {$_.Name -eq 'WinRM'}
    if ($Winrm.Status -eq 'Running') {
        Format-RichTextBox -RichTextBoxControl $AuditPart -Text $Winrm.Status -BackGroundColor LightGreen
    }
    elseif ($Winrm.Status -eq 'Stopped') {
        Format-RichTextBox -RichTextBoxControl $AuditPart -Text $Winrm.Status -BackGroundColor DarkRed -ForeGroundColor White
    }
    else {
        Format-RichTextBox -RichTextBoxControl $AuditPart -Text $Winrm.Status -BackGroundColor Yellow
    }
    Format-RichTextBox -RichTextBoxControl $AuditPart -Text ' - WinRM must be Running' -Backgroundcolor RED
})


$erreur.add_click({
$folder = "C:\dev\testpath"

if ((test-path $folder) -eq $true) {$erreur.Background = '#FFAF2E2E'}
else{
$erreur.Background = 'red'
}
})


function TextFormatting {
    [CmdletBinding(
        ConfirmImpact='Medium',
        HelpURI='http://vcloud-lab.com'
    )]
    Param (
        [parameter(Position=0, Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [String]$Text,
        [Switch]$Bold, #https://docs.microsoft.com/en-us/uwp/api/windows.ui.text.fontweights
        [Switch]$Italic, #https://docs.microsoft.com/en-us/uwp/api/windows.ui.text.fontstyle
        [String]$TextDecorations, #https://docs.microsoft.com/en-us/uwp/api/windows.ui.text.textdecorations
        [Int]$FontSize,
        [String]$Foreground,
        [String]$Background,
        [Switch]$NewLine
    )
    Begin {
        #https://docs.microsoft.com/en-us/uwp/api/windows.ui.text
        $ObjRun = New-Object System.Windows.Documents.Run
        function TextUIElement {
            Param (
                    [parameter(Position=0, Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
                    [String]$PropertyName
                )
            $Script:PropValue = $PropertyName
            Switch ($PropertyName) {
                'Bold' {'FontWeight'} #Thin, SemiLight, SemiBold, Normal, Medium, Light, ExtraLight, ExtraBold, ExtraBlack, Bold, Black
                'Italic' {'FontStyle'} #Italic, Normal, Oblique
                'TextDecorations' {'TextDecorations'} #None, Strikethrough, Underline
                'FontSize' {'FontSize'}
                'Foreground' {'Foreground'}
                'Background' {'Background'}
                'NewLine' {'NewLine'}
            }
        }
    }
    Process {
        if ($PSBoundParameters.ContainsKey('NewLine')) {
            $ObjRun.Text = "`n$Text "
        }
        else  {
            $ObjRun.Text = $Text
        }
        
        $AllParameters = $PSBoundParameters.Keys | Where-Object {$_ -ne 'Text'}

        foreach ($SelectedParam in $AllParameters) {
            $Prop = TextUIElement -PropertyName $SelectedParam
            if ($PSBoundParameters[$SelectedParam] -eq [System.Management.Automation.SwitchParameter]::Present) {
                $ObjRun.$Prop = $PropValue
            }
            else {
                $ObjRun.$Prop = $PSBoundParameters[$Prop]
            }
        }
        $ObjRun
    }
}
function Format-RichTextBox {
    #https://msdn.microsoft.com/en-us/library/system.windows.documents.textelement(v=vs.110).aspx#Propertiesshut
    param (
        [parameter(Position=0, Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [System.Windows.Controls.RichTextBox]$RichTextBoxControl,
        [String]$Text,
        [String]$ForeGroundColor = 'Black',
        [String]$BackGroundColor = 'White',
        [String]$FontSize = '12',
        [String]$FontStyle = 'Normal',
        [String]$FontWeight = 'Normal',
        [Switch]$NewLine
    )
    $ParamOptions = $PSBoundParameters
    $RichTextRange = New-Object System.Windows.Documents.TextRange(<#$RichTextBoxControl.Document.ContentStart#>$RichTextBoxControl.Document.ContentEnd, $RichTextBoxControl.Document.ContentEnd)
    if ($ParamOptions.ContainsKey('NewLine')) {
        $RichTextRange.Text = "`n$Text"
    }
    else  {
        $RichTextRange.Text = $Text
    }

    $Defaults = @{ForeGroundColor='Black';BackGroundColor='White';FontSize='12'; FontStyle='Normal'; FontWeight='Normal'}
    foreach ($Key in $Defaults.Keys) {
        if ($ParamOptions.Keys -notcontains $Key) {
            $ParamOptions.Add($Key, $Defaults[$Key])
        }
    }  

    $AllParameters = $ParamOptions.Keys | Where-Object {@('RichTextBoxControl','Text','NewLine') -notcontains $_}
    foreach ($SelectedParam in $AllParameters) {
        if ($SelectedParam -eq 'ForeGroundColor') {$TextElement = [System.Windows.Documents.TextElement]::ForegroundProperty}
        elseif ($SelectedParam -eq 'BackGroundColor') {$TextElement = [System.Windows.Documents.TextElement]::BackgroundProperty}
        elseif ($SelectedParam -eq 'FontSize') {$TextElement = [System.Windows.Documents.TextElement]::FontSizeProperty}
        elseif ($SelectedParam -eq 'FontStyle') {$TextElement = [System.Windows.Documents.TextElement]::FontStyleProperty}
        elseif ($SelectedParam -eq 'FontWeight') {$TextElement = [System.Windows.Documents.TextElement]::FontWeightProperty}
        $RichTextRange.ApplyPropertyValue($TextElement, $ParamOptions[$SelectedParam])
    }
}

#Mandetory last line of every script to load form 
[void]$Form.ShowDialog() 
